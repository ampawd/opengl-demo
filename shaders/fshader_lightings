#version 450 core

struct Material
{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct Light {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform vec3 cameraPosition;
uniform Material material;
uniform Light light;

in vec3 vNormal;
in vec3 LightPosition;
in vec4 fragPosition;
out vec4 color;

void main() {
    vec3 norm = vNormal;
    vec3 lightDir = normalize(LightPosition - vec3(fragPosition.xyz));
    vec3 viewDir = normalize(-vec3(fragPosition.xyz));
    vec3 reflectDir = reflect(-lightDir, norm);

    vec3 ambient = material.ambient * light.ambient;
    vec3 diffuse = (material.diffuse * max(dot(norm, lightDir), 0.0)) * light.diffuse;
    vec3 specular = (material.specular * pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess)) * light.specular;

    color = vec4(ambient + diffuse + specular, 1.0f);    //  phong lighting model
}
