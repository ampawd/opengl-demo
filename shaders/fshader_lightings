#version 450 core

struct Material
{
    sampler2D diffuse;
    vec3 specular;
    float shininess;
};

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform vec3 cameraPosition;
uniform Material material;
uniform Light light;

in vec4 fragPosition;
in vec2 vTexCoord;
in vec3 vNormal;

out vec4 color;

void main() {
    vec3 norm = normalize(vNormal);
    vec3 lightDir = normalize(light.position - vec3(fragPosition.xyz));
    vec3 viewDir = normalize(-vec3(fragPosition.xyz));
    vec3 reflectDir = reflect(-lightDir, norm);

    vec3 ambient = light.ambient * vec3(texture(material.diffuse, vTexCoord));
    vec3 diffuse = light.diffuse * (max(dot(norm, lightDir), 0.0)) * vec3(texture(material.diffuse, vTexCoord));

    vec3 specular = light.specular * (material.specular * pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess));

    color = vec4(ambient + diffuse + specular, 1.0f);    //  phong lighting model
}
