#version 450 core

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

uniform vec3 cameraPosition;
uniform Material material;
uniform Light light;
uniform float lightIntensity;

in vec3 vNormal;
in vec2 vTexCoord;
in vec4 fragPosition;
out vec4 color;

void main() {
    vec3 norm = vNormal;
    vec3 lightDir = normalize(light.position - vec3(fragPosition.xyz));
    vec3 viewDir = normalize(cameraPosition - vec3(fragPosition.xyz));
    vec3 reflectDir = reflect(-lightDir, norm);

    vec3 ambient  = light.ambient * vec3(texture(material.diffuse, vTexCoord));
    vec3 diffuse  = light.diffuse * max(dot(norm, lightDir), 0.0) * vec3(texture(material.diffuse, vTexCoord));
    vec3 specular = light.specular * pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess) * vec3(texture(material.specular, vTexCoord));

    float d = length(light.position - vec3(fragPosition.xyz));
    float attenuation = lightIntensity / (light.constant + light.linear * d + light.quadratic * (d * d));

    color = vec4(attenuation * (ambient + diffuse + specular), 1.0f);    //  phong lighting model
}
