#version 450 core

#define DIR_LIGHTS_NUM 1

struct Material {
    sampler2D diffuseTexure1;
    sampler2D diffuseTexure2;
	sampler2D diffuseTexure3;
	sampler2D diffuseTexure4;
	sampler2D diffuseTexure5;
	sampler2D diffuseTexure6;
	sampler2D diffuseTexure7;
	sampler2D diffuseTexure8;
	sampler2D diffuseTexure9;
	sampler2D diffuseTexure10;
	
	sampler2D specularTexture1;
    sampler2D specularTexture2;
	sampler2D specularTexture3;
	sampler2D specularTexture4;
	sampler2D specularTexture5;
	sampler2D specularTexture6;
	sampler2D specularTexture7;
	sampler2D specularTexture8;
	sampler2D specularTexture9;
	sampler2D specularTexture10;
	float shininess;
};

struct DirLight {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform vec3 cameraPosition;
uniform vec3 lightPosition;
uniform Material material;
uniform DirLight dirLigh1;

in vec3 vNormal;
in vec2 vTexCoord;
in vec4 fragPosition;
out vec4 color;

vec3 calcDirLight(DirLight light, vec3 norm, vec3 viewDir, vec3 fragPosition)
{
    vec3 lightDir = normalize(light.position - fragPosition.xyz);
    vec3 reflectDir = reflect(-lightDir, norm);

    vec3 ambient  = light.ambient * vec3(texture(material.diffuseTexure1, vTexCoord));
    vec3 diffuse  = light.diffuse * max(dot(norm, lightDir), 0.0) * vec3(texture(material.diffuseTexure1, vTexCoord));
    vec3 specular = light.specular * pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess) * vec3(texture(material.specularTexture1, vTexCoord));

    return (ambient + diffuse + specular);
}

void main() {
	vec3 viewDir = normalize(cameraPosition - vec3(fragPosition.xyz));

    vec3 res = calcDirLight(dirLigh1, vNormal, viewDir, vec3(fragPosition.xyz));

    color = vec4(res, 1.0f);
}